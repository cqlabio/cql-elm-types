{
  "xs:schema": {
    "xmlns:xs": "http://www.w3.org/2001/XMLSchema",
    "xmlns": "urn:hl7-org:elm:r1",
    "xmlns:sch": "http://purl.oclc.org/dsdl/schematron",
    "targetNamespace": "urn:hl7-org:elm:r1",
    "elementFormDefault": "qualified",
    "xs:annotation": {
      "xs:documentation": "This file defines the expression extensions that introduce clinically relevant dependencies such as clinical data access, terminology, and value set considerations."
    },
    "xs:include": {
      "schemaLocation": "expression.xsd"
    },
    "xs:complexType": [
      {
        "name": "IncludeElement",
        "xs:annotation": {
          "xs:documentation": "The IncludeElement type specifies include information for an include within a retrieve."
        },
        "xs:complexContent": {
          "xs:extension": {
            "base": "Element",
            "xs:attribute": [
              {
                "name": "relatedDataType",
                "type": "xs:QName",
                "use": "required",
                "xs:annotation": {
                  "xs:documentation": "The relatedDataType attribute specifies the type of the related data being requested."
                }
              },
              {
                "name": "relatedProperty",
                "type": "xs:string",
                "use": "optional",
                "xs:annotation": {
                  "xs:documentation": "The relatedProperty attribute specifies which property of the relatedDataType contains the relatedId for the clinical statement.\n\nThis property may be specified as a path, including qualifiers and constant indexers. The <simplePath> production rule in the CQL grammar provides the formal semantics for this path."
                }
              },
              {
                "name": "relatedSearch",
                "type": "xs:string",
                "use": "optional",
                "xs:annotation": {
                  "xs:documentation": "The relatedSearch attribute specifies the name of the search path to use for searching for data of the relatedDataType."
                }
              },
              {
                "name": "isReverse",
                "type": "xs:boolean",
                "use": "optional",
                "xs:annotation": {
                  "xs:documentation": "The isReverse attribute indicates that the include is reverse, i.e. that the relatedDataType is referencing the data being retrieved, rather than the retrieved data referencing the relatedDataType."
                }
              }
            ]
          }
        }
      },
      {
        "name": "Retrieve",
        "xs:annotation": {
          "xs:documentation": "The retrieve expression defines clinical data that will be used by the artifact. This expression allows clinically relevant filtering criteria to be provided in a well-defined and computable way. This operation defines the integration boundary for artifacts. The result of a retrieve is defined to return the same data for subsequent invocations within the same evaluation request. This means in particular that patient data updates made during the evaluation request are not visible to the artifact. In effect, the patient data is a snapshot of the data as of the start of the evaluation. This ensures strict deterministic and functional behavior of the artifact, and allows the implementation engine freedom to cache intermediate results in order to improve performance."
        },
        "xs:complexContent": {
          "xs:extension": {
            "base": "Expression",
            "xs:sequence": {
              "xs:element": [
                {
                  "name": "id",
                  "type": "Expression",
                  "minOccurs": "0",
                  "maxOccurs": "1",
                  "xs:annotation": {
                    "xs:documentation": "The id element optionally specifies an expression that results in a value that can be used to filter the retrieve to a specific id."
                  }
                },
                {
                  "name": "codes",
                  "type": "Expression",
                  "minOccurs": "0",
                  "maxOccurs": "1",
                  "xs:annotation": {
                    "xs:documentation": "The codes element optionally specifies an expression that results in a List<Code> to match against. Only the clinical statements that match at least one of the specified codes will be returned."
                  }
                },
                {
                  "name": "dateRange",
                  "type": "Expression",
                  "minOccurs": "0",
                  "maxOccurs": "1",
                  "xs:annotation": {
                    "xs:documentation": "The dateRange element optionally specifies an expression that results in an Interval<DateTime> to match against. Only those clinical statements whose date falls within the specified date range will be returned."
                  }
                },
                {
                  "name": "context",
                  "type": "Expression",
                  "minOccurs": "0",
                  "maxOccurs": "1",
                  "xs:annotation": {
                    "xs:documentation": "If specified, the context element references an expression that, when evaluated, provides the context for the retrieve. The expression evaluates to the instance id that will be used as the context for the retrieve."
                  }
                },
                {
                  "name": "include",
                  "type": "IncludeElement",
                  "minOccurs": "0",
                  "maxOccurs": "unbounded",
                  "xs:annotation": {
                    "xs:documentation": "Specifies a related data type to be included in the result as part of the retrieve."
                  }
                }
              ]
            },
            "xs:attribute": [
              {
                "name": "dataType",
                "type": "xs:QName",
                "use": "required",
                "xs:annotation": {
                  "xs:documentation": "The dataType attribute specifies the type of data being requested."
                }
              },
              {
                "name": "templateId",
                "type": "xs:string",
                "use": "optional",
                "xs:annotation": {
                  "xs:documentation": "The templateId attribute specifies an optional template to be used. If specified, the retrieve is defined to return only objects that conform to the template."
                }
              },
              {
                "name": "idProperty",
                "type": "xs:string",
                "use": "optional",
                "xs:annotation": {
                  "xs:documentation": "The idProperty attribute specifies which property of the model contains the Id for the clinical statement.\n\nThis property may be specified as a path, including qualifiers and constant indexers. The <simplePath> production rule in the CQL grammar provides the formal semantics for this path."
                }
              },
              {
                "name": "idSearch",
                "type": "xs:string",
                "use": "optional",
                "xs:annotation": {
                  "xs:documentation": "The idSearch attribute specifies the name of the search path to use for searching for the values in the id element."
                }
              },
              {
                "name": "contextProperty",
                "type": "xs:string",
                "use": "optional",
                "xs:annotation": {
                  "xs:documentation": "The contextProperty attribute optionally specifies which property of the model contains the context value.\n\nNote that implementers could also specify this information elsewhere as part of an implementation catalog, rather than on each Retrieve expression, but allowing it to be specified in the retrieve expression gives the most flexibility. Note also that even in the case of an implementation catalog, implementations would still ned to respect contextProperty values in the ELM due to the possibility of the retrieve specifying alternate context paths. From the persepctive of ELM, the specification ensures that ELM can be processed without reference to the model information.\n\nThis property may be specified as a path, including qualifiers and constant indexers. The <simplePath> production rule in the CQL grammar provides the formal semantics for this path."
                }
              },
              {
                "name": "contextSearch",
                "type": "xs:string",
                "use": "optional",
                "xs:annotation": {
                  "xs:documentation": "The contextSearch attribute specifies the name of the search path to use for searching for the context values."
                }
              },
              {
                "name": "codeProperty",
                "type": "xs:string",
                "use": "optional",
                "xs:annotation": {
                  "xs:documentation": "The codeProperty attribute optionally specifies which property of the model contains the Code or Codes for the clinical statement.\n\nNote that implementers could also specify this information elsewhere as part of an implementation catalog, rather than on each Retrieve expression, but allowing it to be specified in the retrieve expression gives the most flexibility. Note also that even in the case of an implementation catalog, implementations would still need to respect codeProperty values in the ELM due to the possibility of the retrieve specifying alternate code filters. From the perspective of ELM, the specification ensures that ELM can be processed without reference to the model information.\n\nThis property may be specified as a path, including qualifiers and constant indexers. The <simplePath> production rule in the CQL grammar provides the formal semantics for this path."
                }
              },
              {
                "name": "codeSearch",
                "type": "xs:string",
                "use": "optional",
                "xs:annotation": {
                  "xs:documentation": "The codeSearch attribute specifies the name of the search path to use for searching for the values in the code element."
                }
              },
              {
                "name": "codeComparator",
                "type": "xs:string",
                "use": "optional",
                "xs:annotation": {
                  "xs:documentation": "The codeComparator attribute specifies how elements of the code property should be matched to the terminology. One of 'in', '=', or '~'. Note that 'in' will resolve to the appropriate terminology matching operator, resulting in equivalence semantics for value set and code system membership testing."
                }
              },
              {
                "name": "valueSetProperty",
                "type": "xs:string",
                "use": "optional",
                "xs:annotation": {
                  "xs:documentation": "The valueSetProperty attribute optionally specifies which property of the model contains a value set identifier that can be used as an alternative mechanism for matching the value set of the retrieve, in the case when no code is specified in the source data.\n\nThis attribute is intended to address the case where systems representing negation rationale for an activity not performed do so by indicating a valueset identifier rather than a code. For example, when indicating that a medication was not administered, the value set identifier for the expected medication is used, rather than indicating a specific medication that was not administered. In this case, the valueSetProperty attribute allows the retrieve to specify where to look for the value set identifier without needing to change the conceptual data model or the CQL logic describing the negated activity.\n\nNote that implementers could also specify this information elsewhere as part of an implementation catalog, rather than on each Retrieve expression, but allowing it to be specified in the retrieve expression gives the most flexibility. From the perspective of ELM, the specification ensures that ELM can be processed without reference to the model information.\n\nThis property may be specified as a path, including qualifiers and constant indexers. The <simplePath> production rule in the CQL grammar provides the formal semantics for this path."
                }
              },
              {
                "name": "dateProperty",
                "type": "xs:string",
                "use": "optional",
                "xs:annotation": {
                  "xs:documentation": "The dateProperty attribute optionally specifies which property of the model contains the clinically relevant date for the clinical statement.\n\nThis property is expected to reference a property that is either a Date or DateTime, or an interval of Date or DateTime. In either case, the result set will only include instances where the value of the dateProperty is during the date range. For Date or DateTime values, this means the date is both the same or after the beginning of the range, and the same or before the end of the range. For Date- or DateTime-based interval values, this means that the entire interval is included in the date range.\n\nInstances with no value for the dateProperty will not be included in the result set if a date range is specified.\n\nNote that if the dateProperty is specified, the dateLowProperty and dateHighProperty attributes must not be present. And conversely, if the dateLowProperty and dateHighProperty attributes are specified, the dateProperty must not be present. If specified, the dateLowProperty and dateHighProperty values will be used to construct an interval with inclusive boundaries for the date range.\n\nThis property may be specified as a path, including qualifiers and constant indexers. The <simplePath> production rule in the CQL grammar provides the formal semantics for this path."
                }
              },
              {
                "name": "dateLowProperty",
                "type": "xs:string",
                "use": "optional",
                "xs:annotation": {
                  "xs:documentation": "The dateLowProperty attribute optionally specifies which property of the model contains the low component of the clinically relevant date for the clinical statement.\n\nNote that if the dateProperty is specified, the dateLowProperty and dateHighProperty attributes must not be present. And conversely, if the dateLowProperty and dateHighProperty attributes are specified, the dateProperty must not be present.\n\nThis property may be specified as a path, including qualifiers and constant indexers. The <simplePath> production rule in the CQL grammar provides the formal semantics for this path."
                }
              },
              {
                "name": "dateHighProperty",
                "type": "xs:string",
                "use": "optional",
                "xs:annotation": {
                  "xs:documentation": "The dateHighProperty attribute optionally specifies which property of the model contains the high component of the clinically relevant date for the clinical statement.\n\nNote that if the dateProperty is specified, the dateLowProperty and dateHighProperty attributes must not be present. And conversely, if the dateLowProperty and dateHighProperty attributes are specified, the dateProperty must not be present.\n\nThis property may be specified as a path, including qualifiers and constant indexers. The <simplePath> production rule in the CQL grammar provides the formal semantics for this path."
                }
              },
              {
                "name": "dateSearch",
                "type": "xs:string",
                "use": "optional",
                "xs:annotation": {
                  "xs:documentation": "The dateSearch attribute specifies the name of the search path to use for searching for values in the date range specified by the dateRange element."
                }
              }
            ]
          }
        }
      },
      {
        "name": "CodeSystemDef",
        "xs:annotation": {
          "xs:documentation": "The CodeSystemDef type defines a code system identifier that can then be used to identify code systems involved in value set definitions."
        },
        "xs:complexContent": {
          "xs:extension": {
            "base": "Element",
            "xs:attribute": [
              {
                "name": "name",
                "type": "xs:string",
                "use": "required",
                "xs:annotation": {
                  "xs:documentation": "The name of the code system used for reference."
                }
              },
              {
                "name": "id",
                "type": "xs:string",
                "use": "required",
                "xs:annotation": {
                  "xs:documentation": "The unique identifier of the code system."
                }
              },
              {
                "name": "version",
                "type": "xs:string",
                "use": "optional",
                "xs:annotation": {
                  "xs:documentation": "The version of the code system to be used. If no version is specified, the most current published version of the code system is assumed."
                }
              },
              {
                "name": "accessLevel",
                "type": "AccessModifier",
                "use": "optional",
                "default": "Public"
              }
            ]
          }
        }
      },
      {
        "name": "ValueSetDef",
        "xs:annotation": {
          "xs:documentation": "The ValueSetDef type defines a value set identifier that can be referenced by name anywhere within an expression.\n\nThe id specifies the globally unique identifier for the value set. This may be an HL7 OID, a FHIR URL, or a CTS2 value set URL.\n\nIf version is specified, it will be used to resolve the version of the value set definition to be used. Otherwise, the most current published version of the value set is assumed.\n\nIf codeSystems are specified, they will be used to resolve the code systems used within the value set definition to construct the expansion set.\nNote that the recommended approach to statically binding to an expansion set is to use a value set definition that specifies the version of each code system used. The codeSystemVersions attribute is provided only to ensure static binding can be achieved when the value set definition does not specify code system versions as part of the definition header."
        },
        "xs:complexContent": {
          "xs:extension": {
            "base": "Element",
            "xs:sequence": {
              "xs:element": {
                "name": "codeSystem",
                "type": "CodeSystemRef",
                "minOccurs": "0",
                "maxOccurs": "unbounded",
                "xs:annotation": {
                  "xs:documentation": "The code system that should be used to construct the expansion set. Note that the recommended approach to statically binding to an expansion set is to use a value set definition that specifies the version of each code system used. The codeSystem elements are provided only to ensure static binding can be achieved when the value set definition does not specify code system versions as part of the definition header."
                }
              }
            },
            "xs:attribute": [
              {
                "name": "name",
                "type": "xs:string"
              },
              {
                "name": "id",
                "type": "xs:string",
                "use": "required",
                "xs:annotation": {
                  "xs:documentation": "The unique identifier of the value set to be retrieved."
                }
              },
              {
                "name": "version",
                "type": "xs:string",
                "use": "optional",
                "xs:annotation": {
                  "xs:documentation": "The version of the value set to be retrieved. If no version is provided, the most current published version of the value set is assumed."
                }
              },
              {
                "name": "accessLevel",
                "type": "AccessModifier",
                "use": "optional",
                "default": "Public"
              }
            ]
          }
        }
      },
      {
        "name": "CodeDef",
        "xs:annotation": {
          "xs:documentation": "The CodeDef type defines a code identifier that can then be used to reference single codes anywhere within an expression."
        },
        "xs:complexContent": {
          "xs:extension": {
            "base": "Element",
            "xs:sequence": {
              "xs:element": {
                "name": "codeSystem",
                "type": "CodeSystemRef",
                "minOccurs": "0",
                "maxOccurs": "1",
                "xs:annotation": {
                  "xs:documentation": "The code system that contains the code being referenced."
                }
              }
            },
            "xs:attribute": [
              {
                "name": "name",
                "type": "xs:string",
                "use": "required",
                "xs:annotation": {
                  "xs:documentation": "The name of the code used for reference."
                }
              },
              {
                "name": "id",
                "type": "xs:string",
                "use": "required",
                "xs:annotation": {
                  "xs:documentation": "The unique identifier of the code."
                }
              },
              {
                "name": "display",
                "type": "xs:string",
                "use": "optional",
                "xs:annotation": {
                  "xs:documentation": "An optional display string used to describe the code."
                }
              },
              {
                "name": "accessLevel",
                "type": "AccessModifier",
                "use": "optional",
                "default": "Public"
              }
            ]
          }
        }
      },
      {
        "name": "ConceptDef",
        "xs:annotation": {
          "xs:documentation": "The ConceptDef type defines a concept identifier that can then be used to reference single concepts anywhere within an expression."
        },
        "xs:complexContent": {
          "xs:extension": {
            "base": "Element",
            "xs:sequence": {
              "xs:element": {
                "name": "code",
                "type": "CodeRef",
                "minOccurs": "1",
                "maxOccurs": "unbounded",
                "xs:annotation": {
                  "xs:documentation": "A code that makes up the concept. All codes within a given concept must be synonyms."
                }
              }
            },
            "xs:attribute": [
              {
                "name": "name",
                "type": "xs:string",
                "use": "required",
                "xs:annotation": {
                  "xs:documentation": "The name of the concept used for reference."
                }
              },
              {
                "name": "display",
                "type": "xs:string",
                "use": "optional",
                "xs:annotation": {
                  "xs:documentation": "An optional display string used to describe the concept."
                }
              },
              {
                "name": "accessLevel",
                "type": "AccessModifier",
                "use": "optional",
                "default": "Public"
              }
            ]
          }
        }
      },
      {
        "name": "CodeSystemRef",
        "xs:annotation": {
          "xs:documentation": "The CodeSystemRef expression allows a previously defined named code system to be referenced within an expression. Conceptually, referencing a code system returns the set of codes in the code system. Note that this operation should almost never be performed in practice. Code system references are allowed in order to allow for testing of code membership in a particular code system."
        },
        "xs:complexContent": {
          "xs:extension": {
            "base": "Expression",
            "xs:attribute": [
              {
                "name": "name",
                "type": "xs:string"
              },
              {
                "name": "libraryName",
                "type": "xs:string",
                "use": "optional"
              }
            ]
          }
        }
      },
      {
        "name": "ValueSetRef",
        "xs:annotation": {
          "xs:documentation": "The ValueSetRef expression allows a previously defined named value set to be referenced within an expression. Conceptually, referencing a value set returns the expansion set for the value set as a list of codes."
        },
        "xs:complexContent": {
          "xs:extension": {
            "base": "Expression",
            "xs:attribute": [
              {
                "name": "name",
                "type": "xs:string"
              },
              {
                "name": "libraryName",
                "type": "xs:string",
                "use": "optional"
              }
            ]
          }
        }
      },
      {
        "name": "CodeRef",
        "xs:annotation": {
          "xs:documentation": "The CodeRef expression allows a previously defined code to be referenced within an expression."
        },
        "xs:complexContent": {
          "xs:extension": {
            "base": "Expression",
            "xs:attribute": [
              {
                "name": "name",
                "type": "xs:string"
              },
              {
                "name": "libraryName",
                "type": "xs:string",
                "use": "optional"
              }
            ]
          }
        }
      },
      {
        "name": "ConceptRef",
        "xs:annotation": {
          "xs:documentation": "The ConceptRef expression allows a previously defined concept to be referenced within an expression."
        },
        "xs:complexContent": {
          "xs:extension": {
            "base": "Expression",
            "xs:attribute": [
              {
                "name": "name",
                "type": "xs:string"
              },
              {
                "name": "libraryName",
                "type": "xs:string",
                "use": "optional"
              }
            ]
          }
        }
      },
      {
        "name": "Code",
        "xs:annotation": {
          "xs:documentation": "The Code type represents a literal code selector."
        },
        "xs:complexContent": {
          "xs:extension": {
            "base": "Expression",
            "xs:sequence": {
              "xs:element": {
                "name": "system",
                "type": "CodeSystemRef"
              }
            },
            "xs:attribute": [
              {
                "name": "code",
                "type": "xs:string",
                "use": "required"
              },
              {
                "name": "display",
                "type": "xs:string",
                "use": "optional"
              }
            ]
          }
        }
      },
      {
        "name": "Concept",
        "xs:annotation": {
          "xs:documentation": "The Concept type represents a literal concept selector."
        },
        "xs:complexContent": {
          "xs:extension": {
            "base": "Expression",
            "xs:sequence": {
              "xs:element": {
                "name": "code",
                "type": "Code",
                "minOccurs": "1",
                "maxOccurs": "unbounded"
              }
            },
            "xs:attribute": {
              "name": "display",
              "type": "xs:string",
              "use": "optional"
            }
          }
        }
      },
      {
        "name": "InCodeSystem",
        "xs:annotation": {
          "xs:documentation": "The InCodeSystem operator returns true if the given code is in the given code system.\n\nThe first argument is expected to be a String, Code, or Concept.\n\nThe second argument is expected to be of type CodeSystem. When this argument is statically a CodeSystemRef, this allows for both static analysis of the code system references within an artifact, as well as the implementation of code system membership by the target environment as a service call to a terminology server, if desired."
        },
        "xs:complexContent": {
          "xs:extension": {
            "base": "OperatorExpression",
            "xs:sequence": {
              "xs:element": [
                {
                  "name": "code",
                  "type": "Expression"
                },
                {
                  "name": "codesystem",
                  "type": "Expression"
                }
              ]
            }
          }
        }
      },
      {
        "name": "AnyInCodeSystem",
        "xs:annotation": {
          "xs:documentation": "The AnyInCodeSystem operator returns true if any of the given codes are in the given code system.\n\nThe first argument is expected to be a list of String, Code, or Concept.\n\nThe second argument is expected to be of type CodeSystem. When this argument is statically a CodeSystemRef, this allows for both static analysis of the code system references within an artifact, as well as the implementation of code system membership by the target environment as a service call to a terminology server, if desired."
        },
        "xs:complexContent": {
          "xs:extension": {
            "base": "OperatorExpression",
            "xs:sequence": {
              "xs:element": [
                {
                  "name": "codes",
                  "type": "Expression"
                },
                {
                  "name": "codesystem",
                  "type": "Expression"
                }
              ]
            }
          }
        }
      },
      {
        "name": "InValueSet",
        "xs:annotation": {
          "xs:documentation": "The InValueSet operator returns true if the given code is in the given value set.\n\nThe first argument is expected to be a String, Code, or Concept.\n\nThe second argument is expected to be of type ValueSet. When this argument is statically a ValueSetRef, this allows for both static analysis of the value set references within an artifact, as well as the implementation of valueset membership by the target environment as a service call to a terminology server, if desired."
        },
        "xs:complexContent": {
          "xs:extension": {
            "base": "OperatorExpression",
            "xs:sequence": {
              "xs:element": [
                {
                  "name": "code",
                  "type": "Expression"
                },
                {
                  "name": "valueset",
                  "type": "Expression"
                }
              ]
            }
          }
        }
      },
      {
        "name": "AnyInValueSet",
        "xs:annotation": {
          "xs:documentation": "The AnyInValueSet operator returns true if any of the given codes are in the given value set.\n\nThe first argument is expected to be a list of String, Code, or Concept.\n\nThe second argument is expected to be of type ValueSet. When this argument is statically a ValueSetRef, this allows for both static analysis of the value set references within an artifact, as well as the implementation of valueset membership by the target environment as a service call to a terminology server, if desired."
        },
        "xs:complexContent": {
          "xs:extension": {
            "base": "OperatorExpression",
            "xs:sequence": {
              "xs:element": [
                {
                  "name": "codes",
                  "type": "Expression"
                },
                {
                  "name": "valueset",
                  "type": "Expression"
                }
              ]
            }
          }
        }
      },
      {
        "name": "Subsumes",
        "xs:annotation": {
          "xs:documentation": "The Subsumes operator returns true if the given codes are equivalent, or if the first code subsumes the second (i.e. the first code is an ancestor of the second in a subsumption hierarchy), and false otherwise.\n\nFor the Concept overload, this operator returns true if any code in the first concept subsumes any code in the second.\n\nIf either or both arguments are null, the result is null."
        },
        "xs:complexContent": {
          "xs:extension": {
            "base": "BinaryExpression"
          }
        }
      },
      {
        "name": "SubsumedBy",
        "xs:annotation": {
          "xs:documentation": "The SubsumedBy operator returns true if the given codes are equivalent, or if the first code is subsumed by the second code (i.e. the first code is a descendent of the second code in a subsumption hierarchy), and false otherwise.\n\nFor the Concept overload, this operator returns true if any code in the first concept is subsumed by any code in the second.\n\nIf either or both arguments are null, the result is null."
        },
        "xs:complexContent": {
          "xs:extension": {
            "base": "BinaryExpression"
          }
        }
      },
      {
        "name": "Quantity",
        "xs:annotation": {
          "xs:documentation": "The Quantity type defines a clinical quantity. For example, the quantity 10 days or 30 mmHg. The value is a decimal, while the unit is expected to be a valid UCUM unit or calendar duration keyword, singular or plural."
        },
        "xs:complexContent": {
          "xs:extension": {
            "base": "Expression",
            "xs:attribute": [
              {
                "name": "value",
                "type": "xs:decimal"
              },
              {
                "name": "unit",
                "type": "xs:string"
              }
            ]
          }
        }
      },
      {
        "name": "Ratio",
        "xs:annotation": {
          "xs:documentation": "The Ratio type defines a ratio between two quantities. For example, the titre 1:128, or the concentration ratio 5 mg/10 mL. The numerator and denominator are both quantities."
        },
        "xs:complexContent": {
          "xs:extension": {
            "base": "Expression",
            "xs:sequence": {
              "xs:element": [
                {
                  "name": "numerator",
                  "type": "Quantity"
                },
                {
                  "name": "denominator",
                  "type": "Quantity"
                }
              ]
            }
          }
        }
      },
      {
        "name": "CalculateAge",
        "xs:annotation": {
          "xs:documentation": "Calculates the age in the specified precision of a person born on the given date.\n\nThe CalculateAge operator is defined for Date and DateTime.\n\nFor the Date overload, the calculation is performed using Today(), the precision must be one of year, month, week, or day, and the result is the number of whole calendar periods that have elapsed between the given date and today.\n\nFor the DateTime overload, the calculation is performed using Now(), and the result is the number of whole calendar periods that have elapsed between the given datetime and now."
        },
        "xs:complexContent": {
          "xs:extension": {
            "base": "UnaryExpression",
            "xs:attribute": {
              "name": "precision",
              "type": "DateTimePrecision"
            }
          }
        }
      },
      {
        "name": "CalculateAgeAt",
        "xs:annotation": {
          "xs:documentation": "Calculates the age in the specified precision of a person born on a given date, as of another given date.\n\nThe CalculateAgeAt operator has two signatures:\n  (Date, Date)\n  (DateTime, DateTime)\n\nFor the Date overload, precision must be one of year, month, week, or day, and the result is the number of whole calendar periods that have elapsed between the first date and the second date.\n\nFor the DateTime overload, the result is the number of whole calendar periods that have elapsed between the first datetime and the second datetime."
        },
        "xs:complexContent": {
          "xs:extension": {
            "base": "BinaryExpression",
            "xs:attribute": {
              "name": "precision",
              "type": "DateTimePrecision"
            }
          }
        }
      }
    ]
  }
}